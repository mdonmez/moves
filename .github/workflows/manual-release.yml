name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (leave empty to use pyproject.toml version)"
        required: false
        type: string
      prerelease:
        description: "Mark as prerelease"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  actions: read

jobs:
  build-and-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install 3.13

      - name: Sync dependencies
        run: uv sync

      - name: Build package
        run: uv build

      - name: Get package version
        id: get_version
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "wheel_name=moves-$VERSION-py3-none-any.whl" >> $GITHUB_OUTPUT

      - name: Install built package
        run: uv tool install dist/${{ steps.get_version.outputs.wheel_name }}

      - name: Test installation
        run: moves --version

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist/
          retention-days: 30

  release:
    name: Create GitHub Release
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          lfs: true

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install 3.13

      - name: Get package version
        id: get_version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "wheel_name=moves-$VERSION-py3-none-any.whl" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-ubuntu-latest
          path: dist/

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view "${{ steps.get_version.outputs.tag }}" >/dev/null 2>&1;
          then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        run: |
          CHANGELOG=$(cat CHANGELOG.MD)
          gh release create "${{ steps.get_version.outputs.tag }}" \
            --title "Release ${{ steps.get_version.outputs.version }}" \
            --notes "$CHANGELOG

          ## Installation

          Install latest version using:

          ```bash
          uv tool install moves-cli
          ```"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}