name: Build and Release

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  release:
    types: [published]

permissions:
  contents: write
  actions: read
  pull-requests: read
  releases: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Run tests (if any)
        run: |
          # Add test commands here when you have tests
          # uv run pytest
          echo "No tests configured yet"

      - name: Check code formatting
        run: |
          # Optional: Add code formatting checks
          # uv run black --check .
          # uv run isort --check-only .
          echo "Code formatting checks would go here"

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync

      - name: Build package
        run: uv build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for proper versioning

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: List downloaded files
        run: |
          echo "Files in dist directory:"
          ls -la dist/
          echo "Files to be attached to release:"
          find dist/ -name "*.whl" -o -name "*.tar.gz"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.tag }}
          name: Release ${{ steps.get_version.outputs.tag }}
          body: |
            ## Changes

            - Automated release for version ${{ steps.get_version.outputs.version }}
            - Built from commit ${{ github.sha }}

            ## Installation

            ```bash
            # Install via uv tool
            uv tool install https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.tag }}/moves-${{ steps.get_version.outputs.version }}-py3-none-any.whl

            # Or download and install manually
            pip install https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.tag }}/moves-${{ steps.get_version.outputs.version }}-py3-none-any.whl
            ```
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Publish to PyPI (uncomment if you want to publish to PyPI)
  # publish-pypi:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'release' && github.event.action == 'published'
  #
  #   steps:
  #   - name: Download build artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: dist
  #       path: dist/
  #
  #   - name: Publish to PyPI
  #     uses: pypa/gh-action-pypi-publish@release/v1
  #     with:
  #       password: ${{ secrets.PYPI_API_TOKEN }}
